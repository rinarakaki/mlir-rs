/*!
This file contains the declaration of a section-based memory manager used by the MCJIT execution engine and RuntimeDyld.

This file implements the section-based memory manager used by the MCJIT execution engine and RuntimeDyld.

- include <https://github.com/llvm/llvm-project/blob/main/llvm/lib/ExecutionEngine/SectionMemoryManager.h>
- lib <https://github.com/llvm/llvm-project/blob/main/llvm/include/llvm/ExecutionEngine/SectionMemoryManager.cpp>
*/

/**
This is a simple memory manager which implements the methods called by the RuntimeDyld class to allocate memory for section-based loading of objects, usually those generated by the MCJIT execution engine.

This memory manager allocates all section memory as read-write.  The RuntimeDyld will copy JITed section memory into these allocated blocks and perform any necessary linking and relocations.

Any client using this memory manager MUST ensure that section-specific page permissions have been applied before attempting to execute functions in the JITed object.  Permissions can be applied either by calling MCJIT::finalizeObject or by calling SectionMemoryManager::finalizeMemory directly.  Clients of MCJIT should call MCJIT::finalizeObject.
*/
pub struct SectionMemoryManager {

}

/**
This enum describes the various reasons to allocate pages from allocateMappedMemory.
*/
pub enum AllocationPurpose {
    Code,
    ROData,
    RWData,
}

/**
Implementations of this interface are used by SectionMemoryManager to request pages from the operating system.
*/
pub struct MemoryMapper {
}
